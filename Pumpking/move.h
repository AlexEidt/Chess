#ifndef MOVE_H_
#define MOVE_H_

#include <stdint.h>
#include "bitboard.h"
#include "board.h"

// 1st Bit: Is move a capture?
// 2nd Bit: Is move a double pawn push?
// 3rd-5th Bits: Is move a pawn promotion? (Bits contain piece that was promoted).
// 6th Bit: Is move an en passant capture?
// 7th Bit: Is move a castle kingside?
// 8th Bit: Is move a castle queenside?
// 9th Bit: Did move result in castling being lost kingside?
// 10th Bit: Did move result in castling being lost queenside?
// 11th-13th Bits: Captured Piece.
// 14th-16th Bits: Previous En Passant Square. 0-7 -> File A-H.
typedef uint16_t Flag;

#define QUIET 0x0
#define CAPTURE 0x1
#define PAWN_DOUBLE 0x2
#define PROMOTION 0x1c
#define EN_PASSANT 0x20
#define CASTLE_KINGSIDE 0x40
#define CASTLE_QUEENSIDE 0x80
#define CASTLE 0xc0
#define CASTLING_LOST_KINGSIDE 0x100
#define CASTLING_LOST_QUEENSIDE 0x200
#define CASTLING_LOST 0x300

#define IS_CAPTURE(x) (((x) & CAPTURE) != 0)
#define IS_DOUBLE_PUSH(x) (((x) & PAWN_DOUBLE) != 0)
#define IS_PROMOTION(x) (((x) & PROMOTION) != 0)
#define IS_EN_PASSANT(x) (((x) & EN_PASSANT) != 0)
#define IS_CASTLE_KINGSIDE(x) (((x) & CASTLE_KINGSIDE) != 0)
#define IS_CASTLE_QUEENSIDE(x) (((x) & CASTLE_QUEENSIDE) != 0)
#define IS_CASTLE(x) (((x) & CASTLE) != 0)
#define IS_CASTLING_LOST_KINGSIDE(x) (((x) & CASTLING_LOST_KINGSIDE) != 0)
#define IS_CASTLING_LOST_QUEENSIDE(x) (((x) & CASTLING_LOST_QUEENSIDE) != 0)
#define IS_CASTLING_LOST(x) (((x) & CASTLING_LOST) != 0)

#define ADD_PROMOTED_PIECE(x) ((x) << 2)
#define PROMOTED_PIECE(x) (((x) & PROMOTION) >> 2)
#define SET_CAPTURED_PIECE(x) ((x) << 10)
#define EXTRACT_CAPTURED_PIECE(x) ((x) >> 10)

#define SET_EN_PASSANT(x) (((x) & 7) << 13)
#define EXTRACT_EN_PASSANT(x) ((x) >> 13)

typedef struct {
    uint8_t to, from;
    Flag flags;
} Move;

// All possible king moves for each square.
const Bitboard king_moves[64] = {
    0x302, 0x705, 0xe0a, 0x1c14, 0x3828, 0x7050, 0xe0a0, 0xc040,
    0x30203, 0x70507, 0xe0a0e, 0x1c141c, 0x382838, 0x705070, 0xe0a0e0, 0xc040c0,
    0x3020300, 0x7050700, 0xe0a0e00, 0x1c141c00, 0x38283800, 0x70507000, 0xe0a0e000, 0xc040c000,
    0x302030000, 0x705070000, 0xe0a0e0000, 0x1c141c0000, 0x3828380000, 0x7050700000, 0xe0a0e00000, 0xc040c00000,
    0x30203000000, 0x70507000000, 0xe0a0e000000, 0x1c141c000000, 0x382838000000, 0x705070000000, 0xe0a0e0000000, 0xc040c0000000,
    0x3020300000000, 0x7050700000000, 0xe0a0e00000000, 0x1c141c00000000, 0x38283800000000, 0x70507000000000, 0xe0a0e000000000, 0xc040c000000000,
    0x302030000000000, 0x705070000000000, 0xe0a0e0000000000, 0x1c141c0000000000, 0x3828380000000000, 0x7050700000000000, 0xe0a0e00000000000, 0xc040c00000000000,
    0x203000000000000, 0x507000000000000, 0xa0e000000000000, 0x141c000000000000, 0x2838000000000000, 0x5070000000000000, 0xa0e0000000000000, 0x40c0000000000000
};

// All possible knight moves for each square.
const Bitboard knight_moves[64] = {
    0x20400, 0x50800, 0xa1100, 0x142200, 0x284400, 0x508800, 0xa01000, 0x402000,
    0x2040004, 0x5080008, 0xa110011, 0x14220022, 0x28440044, 0x50880088, 0xa0100010, 0x40200020,
    0x204000402, 0x508000805, 0xa1100110a, 0x1422002214, 0x2844004428, 0x5088008850, 0xa0100010a0, 0x4020002040,
    0x20400040200, 0x50800080500, 0xa1100110a00, 0x142200221400, 0x284400442800, 0x508800885000, 0xa0100010a000, 0x402000204000,
    0x2040004020000, 0x5080008050000, 0xa1100110a0000, 0x14220022140000, 0x28440044280000, 0x50880088500000, 0xa0100010a00000, 0x40200020400000,
    0x204000402000000, 0x508000805000000, 0xa1100110a000000, 0x1422002214000000, 0x2844004428000000, 0x5088008850000000, 0xa0100010a0000000, 0x4020002040000000,
    0x400040200000000, 0x800080500000000, 0x1100110a00000000, 0x2200221400000000, 0x4400442800000000, 0x8800885000000000, 0x100010a000000000, 0x2000204000000000,
    0x4020000000000, 0x8050000000000, 0x110a0000000000, 0x22140000000000, 0x44280000000000, 0x88500000000000, 0x10a00000000000, 0x20400000000000
};

#define SOUTH 0
#define WEST 1
#define NORTH 2
#define EAST 3

const Bitboard rook_moves[64][4] = { // South, West, North, East
    {0x0, 0xfe, 0x101010101010100, 0x0},
    {0x0, 0xfc, 0x202020202020200, 0x1},
    {0x0, 0xf8, 0x404040404040400, 0x3},
    {0x0, 0xf0, 0x808080808080800, 0x7},
    {0x0, 0xe0, 0x1010101010101000, 0xf},
    {0x0, 0xc0, 0x2020202020202000, 0x1f},
    {0x0, 0x80, 0x4040404040404000, 0x3f},
    {0x0, 0x0, 0x8080808080808000, 0x7f},
    {0x1, 0xfe00, 0x101010101010000, 0x0},
    {0x2, 0xfc00, 0x202020202020000, 0x100},
    {0x4, 0xf800, 0x404040404040000, 0x300},
    {0x8, 0xf000, 0x808080808080000, 0x700},
    {0x10, 0xe000, 0x1010101010100000, 0xf00},
    {0x20, 0xc000, 0x2020202020200000, 0x1f00},
    {0x40, 0x8000, 0x4040404040400000, 0x3f00},
    {0x80, 0x0, 0x8080808080800000, 0x7f00},
    {0x101, 0xfe0000, 0x101010101000000, 0x0},
    {0x202, 0xfc0000, 0x202020202000000, 0x10000},
    {0x404, 0xf80000, 0x404040404000000, 0x30000},
    {0x808, 0xf00000, 0x808080808000000, 0x70000},
    {0x1010, 0xe00000, 0x1010101010000000, 0xf0000},
    {0x2020, 0xc00000, 0x2020202020000000, 0x1f0000},
    {0x4040, 0x800000, 0x4040404040000000, 0x3f0000},
    {0x8080, 0x0, 0x8080808080000000, 0x7f0000},
    {0x10101, 0xfe000000, 0x101010100000000, 0x0},
    {0x20202, 0xfc000000, 0x202020200000000, 0x1000000},
    {0x40404, 0xf8000000, 0x404040400000000, 0x3000000},
    {0x80808, 0xf0000000, 0x808080800000000, 0x7000000},
    {0x101010, 0xe0000000, 0x1010101000000000, 0xf000000},
    {0x202020, 0xc0000000, 0x2020202000000000, 0x1f000000},
    {0x404040, 0x80000000, 0x4040404000000000, 0x3f000000},
    {0x808080, 0x0, 0x8080808000000000, 0x7f000000},
    {0x1010101, 0xfe00000000, 0x101010000000000, 0x0},
    {0x2020202, 0xfc00000000, 0x202020000000000, 0x100000000},
    {0x4040404, 0xf800000000, 0x404040000000000, 0x300000000},
    {0x8080808, 0xf000000000, 0x808080000000000, 0x700000000},
    {0x10101010, 0xe000000000, 0x1010100000000000, 0xf00000000},
    {0x20202020, 0xc000000000, 0x2020200000000000, 0x1f00000000},
    {0x40404040, 0x8000000000, 0x4040400000000000, 0x3f00000000},
    {0x80808080, 0x0, 0x8080800000000000, 0x7f00000000},
    {0x101010101, 0xfe0000000000, 0x101000000000000, 0x0},
    {0x202020202, 0xfc0000000000, 0x202000000000000, 0x10000000000},
    {0x404040404, 0xf80000000000, 0x404000000000000, 0x30000000000},
    {0x808080808, 0xf00000000000, 0x808000000000000, 0x70000000000},
    {0x1010101010, 0xe00000000000, 0x1010000000000000, 0xf0000000000},
    {0x2020202020, 0xc00000000000, 0x2020000000000000, 0x1f0000000000},
    {0x4040404040, 0x800000000000, 0x4040000000000000, 0x3f0000000000},
    {0x8080808080, 0x0, 0x8080000000000000, 0x7f0000000000},
    {0x10101010101, 0xfe000000000000, 0x100000000000000, 0x0},
    {0x20202020202, 0xfc000000000000, 0x200000000000000, 0x1000000000000},
    {0x40404040404, 0xf8000000000000, 0x400000000000000, 0x3000000000000},
    {0x80808080808, 0xf0000000000000, 0x800000000000000, 0x7000000000000},
    {0x101010101010, 0xe0000000000000, 0x1000000000000000, 0xf000000000000},
    {0x202020202020, 0xc0000000000000, 0x2000000000000000, 0x1f000000000000},
    {0x404040404040, 0x80000000000000, 0x4000000000000000, 0x3f000000000000},
    {0x808080808080, 0x0, 0x8000000000000000, 0x7f000000000000},
    {0x1010101010101, 0xfe00000000000000, 0x0, 0x0},
    {0x2020202020202, 0xfc00000000000000, 0x0, 0x100000000000000},
    {0x4040404040404, 0xf800000000000000, 0x0, 0x300000000000000},
    {0x8080808080808, 0xf000000000000000, 0x0, 0x700000000000000},
    {0x10101010101010, 0xe000000000000000, 0x0, 0xf00000000000000},
    {0x20202020202020, 0xc000000000000000, 0x0, 0x1f00000000000000},
    {0x40404040404040, 0x8000000000000000, 0x0, 0x3f00000000000000},
    {0x80808080808080, 0x0, 0x0, 0x7f00000000000000}
};

#define SOUTHEAST 0
#define SOUTHWEST 1
#define NORTHWEST 2
#define NORTHEAST 3

const Bitboard bishop_moves[64][4] = { // South East, South West, North West, North East
    {0x0, 0x0, 0x8040201008040200, 0x0},
    {0x0, 0x0, 0x80402010080400, 0x100},
    {0x0, 0x0, 0x804020100800, 0x10200},
    {0x0, 0x0, 0x8040201000, 0x1020400},
    {0x0, 0x0, 0x80402000, 0x102040800},
    {0x0, 0x0, 0x804000, 0x10204081000},
    {0x0, 0x0, 0x8000, 0x1020408102000},
    {0x0, 0x0, 0x0, 0x102040810204000},
    {0x0, 0x2, 0x4020100804020000, 0x0},
    {0x1, 0x4, 0x8040201008040000, 0x10000},
    {0x2, 0x8, 0x80402010080000, 0x1020000},
    {0x4, 0x10, 0x804020100000, 0x102040000},
    {0x8, 0x20, 0x8040200000, 0x10204080000},
    {0x10, 0x40, 0x80400000, 0x1020408100000},
    {0x20, 0x80, 0x800000, 0x102040810200000},
    {0x40, 0x0, 0x0, 0x204081020400000},
    {0x0, 0x204, 0x2010080402000000, 0x0},
    {0x100, 0x408, 0x4020100804000000, 0x1000000},
    {0x201, 0x810, 0x8040201008000000, 0x102000000},
    {0x402, 0x1020, 0x80402010000000, 0x10204000000},
    {0x804, 0x2040, 0x804020000000, 0x1020408000000},
    {0x1008, 0x4080, 0x8040000000, 0x102040810000000},
    {0x2010, 0x8000, 0x80000000, 0x204081020000000},
    {0x4020, 0x0, 0x0, 0x408102040000000},
    {0x0, 0x20408, 0x1008040200000000, 0x0},
    {0x10000, 0x40810, 0x2010080400000000, 0x100000000},
    {0x20100, 0x81020, 0x4020100800000000, 0x10200000000},
    {0x40201, 0x102040, 0x8040201000000000, 0x1020400000000},
    {0x80402, 0x204080, 0x80402000000000, 0x102040800000000},
    {0x100804, 0x408000, 0x804000000000, 0x204081000000000},
    {0x201008, 0x800000, 0x8000000000, 0x408102000000000},
    {0x402010, 0x0, 0x0, 0x810204000000000},
    {0x0, 0x2040810, 0x804020000000000, 0x0},
    {0x1000000, 0x4081020, 0x1008040000000000, 0x10000000000},
    {0x2010000, 0x8102040, 0x2010080000000000, 0x1020000000000},
    {0x4020100, 0x10204080, 0x4020100000000000, 0x102040000000000},
    {0x8040201, 0x20408000, 0x8040200000000000, 0x204080000000000},
    {0x10080402, 0x40800000, 0x80400000000000, 0x408100000000000},
    {0x20100804, 0x80000000, 0x800000000000, 0x810200000000000},
    {0x40201008, 0x0, 0x0, 0x1020400000000000},
    {0x0, 0x204081020, 0x402000000000000, 0x0},
    {0x100000000, 0x408102040, 0x804000000000000, 0x1000000000000},
    {0x201000000, 0x810204080, 0x1008000000000000, 0x102000000000000},
    {0x402010000, 0x1020408000, 0x2010000000000000, 0x204000000000000},
    {0x804020100, 0x2040800000, 0x4020000000000000, 0x408000000000000},
    {0x1008040201, 0x4080000000, 0x8040000000000000, 0x810000000000000},
    {0x2010080402, 0x8000000000, 0x80000000000000, 0x1020000000000000},
    {0x4020100804, 0x0, 0x0, 0x2040000000000000},
    {0x0, 0x20408102040, 0x200000000000000, 0x0},
    {0x10000000000, 0x40810204080, 0x400000000000000, 0x100000000000000},
    {0x20100000000, 0x81020408000, 0x800000000000000, 0x200000000000000},
    {0x40201000000, 0x102040800000, 0x1000000000000000, 0x400000000000000},
    {0x80402010000, 0x204080000000, 0x2000000000000000, 0x800000000000000},
    {0x100804020100, 0x408000000000, 0x4000000000000000, 0x1000000000000000},
    {0x201008040201, 0x800000000000, 0x8000000000000000, 0x2000000000000000},
    {0x402010080402, 0x0, 0x0, 0x4000000000000000},
    {0x0, 0x2040810204080, 0x0, 0x0},
    {0x1000000000000, 0x4081020408000, 0x0, 0x0},
    {0x2010000000000, 0x8102040800000, 0x0, 0x0},
    {0x4020100000000, 0x10204080000000, 0x0, 0x0},
    {0x8040201000000, 0x20408000000000, 0x0, 0x0},
    {0x10080402010000, 0x40800000000000, 0x0, 0x0},
    {0x20100804020100, 0x80000000000000, 0x0, 0x0},
    {0x40201008040201, 0x0, 0x0, 0x0}
};

#define KINGSIDE_PATH 0
#define QUEENSIDE_PATH 1
#define QUEENSIDE_PATH_TO_ROOK 2
#define KING_POSITION 3
#define KING_DST_KINGSIDE 4
#define KING_DST_QUEENSIDE 5

// Each 6-tuple represents:
// 1. Kingside path (White: E1-G1, Black: E8-G8)
// 2. Queenside path (White: E1-C1, Black: E8-C8)
// 3. Queenside path to rook (White: E1-B1, Black: E8-B8)
// 4. King Position (White: E1, Black: E8)
// 5. King Destination Kingside (White: G1, Black: G8)
// 6. King Destination Queenside (White: C1, Black: C8)
const Bitboard castling[2][6] = {
    {0x6, 0x30, 0x70, 1ULL << E1, 1ULL << G1, 1ULL << C1}, // White
    {0x600000000000000, 0x3000000000000000, 0x7000000000000000, 1ULL << E8, 1ULL << G8, 1ULL << C8} // Black
};

int extract_moves_pawns(Bitboard board, int8_t offset, Move* moves, int start, Flag flag);
int extract_moves_pawns_promotions(Bitboard board, int8_t offset, Move* moves, int start, Flag flag);
int extract_moves(Bitboard board, int8_t offset, Move* moves, int start, Flag flag);

int gen_pawn_pushes(Board* board, Move* moves, int index);
int gen_pawn_captures(Board* board, Move* moves, int index);
int gen_pawn_promotions_quiets(Board* board, Move* moves, int index);
int gen_pawn_promotions_captures(Board* board, Move* moves, int index);
int gen_pawn_en_passant(Board* board, Move* moves, int index);

int gen_knight_moves(Board* board, Move* moves, int index);
int gen_king_moves(Board* board, Move* moves, int index);
int gen_rook_moves(Board* board, Move* moves, int index);
int gen_bishop_moves(Board* board, Move* moves, int index);
int gen_queen_moves(Board* board, Move* moves, int index);

int gen_castle_moves(Board* board, Move* moves, int index);

int gen_cardinal_moves(Board* board, Move* moves, int index, Piece piece);
int gen_intercardinal_moves(Board* board, Move* moves, int index, Piece piece);

Bitboard gen_cardinal_attacks(Board* board, Piece piece);
Bitboard gen_intercardinal_attacks(Board* board, Piece piece);
Bitboard gen_attacks(Board* board);

int gen_legal_moves(Board* board, Move* moves);

void make_move(Board* board, Move* move);
void undo_move(Board* board, Move* move);

#endif