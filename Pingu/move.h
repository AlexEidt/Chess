#ifndef MOVE_H_
#define MOVE_H_

#include <stdint.h>
#include "bitboard.h"
#include "board.h"

// 1st Bit: Is move a capture?
// 2nd Bit: Is move a double pawn push?
// 3rd-5th Bits: Is move a pawn promotion? (Bits contain piece that was promoted).
// 6th Bit: Is move an en passant capture?
// 7th Bit: Is move a castle kingside?
// 8th Bit: Is move a castle queenside?
// 9th Bit: Did move result in castling being lost kingside?
// 10th Bit: Did move result in castling being lost queenside?
// 11th-13th Bits: Captured Piece.
// 14th-16th Bits: Previous En Passant Square. 0-7 -> File A-H.
typedef uint16_t Flag;

#define QUIET 0x0
#define CAPTURE 0x1
#define PAWN_DOUBLE 0x2
#define PROMOTION 0x1c
#define EN_PASSANT 0x20
#define CASTLE_KINGSIDE 0x40
#define CASTLE_QUEENSIDE 0x80
#define CASTLE 0xc0

#define IS_CAPTURE(x) (((x) & CAPTURE) != 0)
#define IS_DOUBLE_PUSH(x) (((x) & PAWN_DOUBLE) != 0)
#define IS_PROMOTION(x) (((x) & PROMOTION) != 0)
#define IS_EN_PASSANT(x) (((x) & EN_PASSANT) != 0)
#define IS_CASTLE_KINGSIDE(x) (((x) & CASTLE_KINGSIDE) != 0)
#define IS_CASTLE_QUEENSIDE(x) (((x) & CASTLE_QUEENSIDE) != 0)
#define IS_CASTLE(x) (((x) & CASTLE) != 0)

#define ADD_PROMOTED_PIECE(x) ((x) << 2)
#define PROMOTED_PIECE(x) (((x) & PROMOTION) >> 2)

typedef struct {
    uint8_t to, from;
    Flag flags;
} Move;

// All possible king moves for each square.
const Bitboard king_moves[64] = {
    0x302ULL, 0x705ULL, 0xe0aULL, 0x1c14ULL, 0x3828ULL, 0x7050ULL, 0xe0a0ULL, 0xc040ULL,
    0x30203ULL, 0x70507ULL, 0xe0a0eULL, 0x1c141cULL, 0x382838ULL, 0x705070ULL, 0xe0a0e0ULL, 0xc040c0ULL,
    0x3020300ULL, 0x7050700ULL, 0xe0a0e00ULL, 0x1c141c00ULL, 0x38283800ULL, 0x70507000ULL, 0xe0a0e000ULL, 0xc040c000ULL,
    0x302030000ULL, 0x705070000ULL, 0xe0a0e0000ULL, 0x1c141c0000ULL, 0x3828380000ULL, 0x7050700000ULL, 0xe0a0e00000ULL, 0xc040c00000ULL,
    0x30203000000ULL, 0x70507000000ULL, 0xe0a0e000000ULL, 0x1c141c000000ULL, 0x382838000000ULL, 0x705070000000ULL, 0xe0a0e0000000ULL, 0xc040c0000000ULL,
    0x3020300000000ULL, 0x7050700000000ULL, 0xe0a0e00000000ULL, 0x1c141c00000000ULL, 0x38283800000000ULL, 0x70507000000000ULL, 0xe0a0e000000000ULL, 0xc040c000000000ULL,
    0x302030000000000ULL, 0x705070000000000ULL, 0xe0a0e0000000000ULL, 0x1c141c0000000000ULL, 0x3828380000000000ULL, 0x7050700000000000ULL, 0xe0a0e00000000000ULL, 0xc040c00000000000ULL,
    0x203000000000000ULL, 0x507000000000000ULL, 0xa0e000000000000ULL, 0x141c000000000000ULL, 0x2838000000000000ULL, 0x5070000000000000ULL, 0xa0e0000000000000ULL, 0x40c0000000000000ULL
};

// All possible knight moves for each square.
const Bitboard knight_moves[64] = {
    0x20400ULL, 0x50800ULL, 0xa1100ULL, 0x142200ULL, 0x284400ULL, 0x508800ULL, 0xa01000ULL, 0x402000ULL,
    0x2040004ULL, 0x5080008ULL, 0xa110011ULL, 0x14220022ULL, 0x28440044ULL, 0x50880088ULL, 0xa0100010ULL, 0x40200020ULL,
    0x204000402ULL, 0x508000805ULL, 0xa1100110aULL, 0x1422002214ULL, 0x2844004428ULL, 0x5088008850ULL, 0xa0100010a0ULL, 0x4020002040ULL,
    0x20400040200ULL, 0x50800080500ULL, 0xa1100110a00ULL, 0x142200221400ULL, 0x284400442800ULL, 0x508800885000ULL, 0xa0100010a000ULL, 0x402000204000ULL,
    0x2040004020000ULL, 0x5080008050000ULL, 0xa1100110a0000ULL, 0x14220022140000ULL, 0x28440044280000ULL, 0x50880088500000ULL, 0xa0100010a00000ULL, 0x40200020400000ULL,
    0x204000402000000ULL, 0x508000805000000ULL, 0xa1100110a000000ULL, 0x1422002214000000ULL, 0x2844004428000000ULL, 0x5088008850000000ULL, 0xa0100010a0000000ULL, 0x4020002040000000ULL,
    0x400040200000000ULL, 0x800080500000000ULL, 0x1100110a00000000ULL, 0x2200221400000000ULL, 0x4400442800000000ULL, 0x8800885000000000ULL, 0x100010a000000000ULL, 0x2000204000000000ULL,
    0x4020000000000ULL, 0x8050000000000ULL, 0x110a0000000000ULL, 0x22140000000000ULL, 0x44280000000000ULL, 0x88500000000000ULL, 0x10a00000000000ULL, 0x20400000000000ULL
};

#define SOUTH 0
#define WEST 1
#define NORTH 2
#define EAST 3

const Bitboard rook_moves[65][4] = { // South, West, North, East
    {0x0ULL, 0xfeULL, 0x101010101010100ULL, 0x0ULL},
    {0x0ULL, 0xfcULL, 0x202020202020200ULL, 0x1ULL},
    {0x0ULL, 0xf8ULL, 0x404040404040400ULL, 0x3ULL},
    {0x0ULL, 0xf0ULL, 0x808080808080800ULL, 0x7ULL},
    {0x0ULL, 0xe0ULL, 0x1010101010101000ULL, 0xfULL},
    {0x0ULL, 0xc0ULL, 0x2020202020202000ULL, 0x1fULL},
    {0x0ULL, 0x80ULL, 0x4040404040404000ULL, 0x3fULL},
    {0x0ULL, 0x0ULL, 0x8080808080808000ULL, 0x7fULL},
    {0x1ULL, 0xfe00ULL, 0x101010101010000ULL, 0x0ULL},
    {0x2ULL, 0xfc00ULL, 0x202020202020000ULL, 0x100ULL},
    {0x4ULL, 0xf800ULL, 0x404040404040000ULL, 0x300ULL},
    {0x8ULL, 0xf000ULL, 0x808080808080000ULL, 0x700ULL},
    {0x10ULL, 0xe000ULL, 0x1010101010100000ULL, 0xf00ULL},
    {0x20ULL, 0xc000ULL, 0x2020202020200000ULL, 0x1f00ULL},
    {0x40ULL, 0x8000ULL, 0x4040404040400000ULL, 0x3f00ULL},
    {0x80ULL, 0x0ULL, 0x8080808080800000ULL, 0x7f00ULL},
    {0x101ULL, 0xfe0000ULL, 0x101010101000000ULL, 0x0ULL},
    {0x202ULL, 0xfc0000ULL, 0x202020202000000ULL, 0x10000ULL},
    {0x404ULL, 0xf80000ULL, 0x404040404000000ULL, 0x30000ULL},
    {0x808ULL, 0xf00000ULL, 0x808080808000000ULL, 0x70000ULL},
    {0x1010ULL, 0xe00000ULL, 0x1010101010000000ULL, 0xf0000ULL},
    {0x2020ULL, 0xc00000ULL, 0x2020202020000000ULL, 0x1f0000ULL},
    {0x4040ULL, 0x800000ULL, 0x4040404040000000ULL, 0x3f0000ULL},
    {0x8080ULL, 0x0ULL, 0x8080808080000000ULL, 0x7f0000ULL},
    {0x10101ULL, 0xfe000000ULL, 0x101010100000000ULL, 0x0ULL},
    {0x20202ULL, 0xfc000000ULL, 0x202020200000000ULL, 0x1000000ULL},
    {0x40404ULL, 0xf8000000ULL, 0x404040400000000ULL, 0x3000000ULL},
    {0x80808ULL, 0xf0000000ULL, 0x808080800000000ULL, 0x7000000ULL},
    {0x101010ULL, 0xe0000000ULL, 0x1010101000000000ULL, 0xf000000ULL},
    {0x202020ULL, 0xc0000000ULL, 0x2020202000000000ULL, 0x1f000000ULL},
    {0x404040ULL, 0x80000000ULL, 0x4040404000000000ULL, 0x3f000000ULL},
    {0x808080ULL, 0x0ULL, 0x8080808000000000ULL, 0x7f000000ULL},
    {0x1010101ULL, 0xfe00000000ULL, 0x101010000000000ULL, 0x0ULL},
    {0x2020202ULL, 0xfc00000000ULL, 0x202020000000000ULL, 0x100000000ULL},
    {0x4040404ULL, 0xf800000000ULL, 0x404040000000000ULL, 0x300000000ULL},
    {0x8080808ULL, 0xf000000000ULL, 0x808080000000000ULL, 0x700000000ULL},
    {0x10101010ULL, 0xe000000000ULL, 0x1010100000000000ULL, 0xf00000000ULL},
    {0x20202020ULL, 0xc000000000ULL, 0x2020200000000000ULL, 0x1f00000000ULL},
    {0x40404040ULL, 0x8000000000ULL, 0x4040400000000000ULL, 0x3f00000000ULL},
    {0x80808080ULL, 0x0ULL, 0x8080800000000000ULL, 0x7f00000000ULL},
    {0x101010101ULL, 0xfe0000000000ULL, 0x101000000000000ULL, 0x0ULL},
    {0x202020202ULL, 0xfc0000000000ULL, 0x202000000000000ULL, 0x10000000000ULL},
    {0x404040404ULL, 0xf80000000000ULL, 0x404000000000000ULL, 0x30000000000ULL},
    {0x808080808ULL, 0xf00000000000ULL, 0x808000000000000ULL, 0x70000000000ULL},
    {0x1010101010ULL, 0xe00000000000ULL, 0x1010000000000000ULL, 0xf0000000000ULL},
    {0x2020202020ULL, 0xc00000000000ULL, 0x2020000000000000ULL, 0x1f0000000000ULL},
    {0x4040404040ULL, 0x800000000000ULL, 0x4040000000000000ULL, 0x3f0000000000ULL},
    {0x8080808080ULL, 0x0ULL, 0x8080000000000000ULL, 0x7f0000000000ULL},
    {0x10101010101ULL, 0xfe000000000000ULL, 0x100000000000000ULL, 0x0ULL},
    {0x20202020202ULL, 0xfc000000000000ULL, 0x200000000000000ULL, 0x1000000000000ULL},
    {0x40404040404ULL, 0xf8000000000000ULL, 0x400000000000000ULL, 0x3000000000000ULL},
    {0x80808080808ULL, 0xf0000000000000ULL, 0x800000000000000ULL, 0x7000000000000ULL},
    {0x101010101010ULL, 0xe0000000000000ULL, 0x1000000000000000ULL, 0xf000000000000ULL},
    {0x202020202020ULL, 0xc0000000000000ULL, 0x2000000000000000ULL, 0x1f000000000000ULL},
    {0x404040404040ULL, 0x80000000000000ULL, 0x4000000000000000ULL, 0x3f000000000000ULL},
    {0x808080808080ULL, 0x0ULL, 0x8000000000000000ULL, 0x7f000000000000ULL},
    {0x1010101010101ULL, 0xfe00000000000000ULL, 0x0ULL, 0x0ULL},
    {0x2020202020202ULL, 0xfc00000000000000ULL, 0x0ULL, 0x100000000000000ULL},
    {0x4040404040404ULL, 0xf800000000000000ULL, 0x0ULL, 0x300000000000000ULL},
    {0x8080808080808ULL, 0xf000000000000000ULL, 0x0ULL, 0x700000000000000ULL},
    {0x10101010101010ULL, 0xe000000000000000ULL, 0x0ULL, 0xf00000000000000ULL},
    {0x20202020202020ULL, 0xc000000000000000ULL, 0x0ULL, 0x1f00000000000000ULL},
    {0x40404040404040ULL, 0x8000000000000000ULL, 0x0ULL, 0x3f00000000000000ULL},
    {0x80808080808080ULL, 0x0ULL, 0x0ULL, 0x7f00000000000000ULL},
    {0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL}
};

// Rook moves including the current location.
const Bitboard rook_moves_inc[65][4] = { // South, West, North, East
    {0x1ULL, 0xffULL, 0x101010101010101ULL, 0x1ULL},
    {0x2ULL, 0xfeULL, 0x202020202020202ULL, 0x3ULL},
    {0x4ULL, 0xfcULL, 0x404040404040404ULL, 0x7ULL},
    {0x8ULL, 0xf8ULL, 0x808080808080808ULL, 0xfULL},
    {0x10ULL, 0xf0ULL, 0x1010101010101010ULL, 0x1fULL},
    {0x20ULL, 0xe0ULL, 0x2020202020202020ULL, 0x3fULL},
    {0x40ULL, 0xc0ULL, 0x4040404040404040ULL, 0x7fULL},
    {0x80ULL, 0x80ULL, 0x8080808080808080ULL, 0xffULL},
    {0x101ULL, 0xff00ULL, 0x101010101010100ULL, 0x100ULL},
    {0x202ULL, 0xfe00ULL, 0x202020202020200ULL, 0x300ULL},
    {0x404ULL, 0xfc00ULL, 0x404040404040400ULL, 0x700ULL},
    {0x808ULL, 0xf800ULL, 0x808080808080800ULL, 0xf00ULL},
    {0x1010ULL, 0xf000ULL, 0x1010101010101000ULL, 0x1f00ULL},
    {0x2020ULL, 0xe000ULL, 0x2020202020202000ULL, 0x3f00ULL},
    {0x4040ULL, 0xc000ULL, 0x4040404040404000ULL, 0x7f00ULL},
    {0x8080ULL, 0x8000ULL, 0x8080808080808000ULL, 0xff00ULL},
    {0x10101ULL, 0xff0000ULL, 0x101010101010000ULL, 0x10000ULL},
    {0x20202ULL, 0xfe0000ULL, 0x202020202020000ULL, 0x30000ULL},
    {0x40404ULL, 0xfc0000ULL, 0x404040404040000ULL, 0x70000ULL},
    {0x80808ULL, 0xf80000ULL, 0x808080808080000ULL, 0xf0000ULL},
    {0x101010ULL, 0xf00000ULL, 0x1010101010100000ULL, 0x1f0000ULL},
    {0x202020ULL, 0xe00000ULL, 0x2020202020200000ULL, 0x3f0000ULL},
    {0x404040ULL, 0xc00000ULL, 0x4040404040400000ULL, 0x7f0000ULL},
    {0x808080ULL, 0x800000ULL, 0x8080808080800000ULL, 0xff0000ULL},
    {0x1010101ULL, 0xff000000ULL, 0x101010101000000ULL, 0x1000000ULL},
    {0x2020202ULL, 0xfe000000ULL, 0x202020202000000ULL, 0x3000000ULL},
    {0x4040404ULL, 0xfc000000ULL, 0x404040404000000ULL, 0x7000000ULL},
    {0x8080808ULL, 0xf8000000ULL, 0x808080808000000ULL, 0xf000000ULL},
    {0x10101010ULL, 0xf0000000ULL, 0x1010101010000000ULL, 0x1f000000ULL},
    {0x20202020ULL, 0xe0000000ULL, 0x2020202020000000ULL, 0x3f000000ULL},
    {0x40404040ULL, 0xc0000000ULL, 0x4040404040000000ULL, 0x7f000000ULL},
    {0x80808080ULL, 0x80000000ULL, 0x8080808080000000ULL, 0xff000000ULL},
    {0x101010101ULL, 0xff00000000ULL, 0x101010100000000ULL, 0x100000000ULL},
    {0x202020202ULL, 0xfe00000000ULL, 0x202020200000000ULL, 0x300000000ULL},
    {0x404040404ULL, 0xfc00000000ULL, 0x404040400000000ULL, 0x700000000ULL},
    {0x808080808ULL, 0xf800000000ULL, 0x808080800000000ULL, 0xf00000000ULL},
    {0x1010101010ULL, 0xf000000000ULL, 0x1010101000000000ULL, 0x1f00000000ULL},
    {0x2020202020ULL, 0xe000000000ULL, 0x2020202000000000ULL, 0x3f00000000ULL},
    {0x4040404040ULL, 0xc000000000ULL, 0x4040404000000000ULL, 0x7f00000000ULL},
    {0x8080808080ULL, 0x8000000000ULL, 0x8080808000000000ULL, 0xff00000000ULL},
    {0x10101010101ULL, 0xff0000000000ULL, 0x101010000000000ULL, 0x10000000000ULL},
    {0x20202020202ULL, 0xfe0000000000ULL, 0x202020000000000ULL, 0x30000000000ULL},
    {0x40404040404ULL, 0xfc0000000000ULL, 0x404040000000000ULL, 0x70000000000ULL},
    {0x80808080808ULL, 0xf80000000000ULL, 0x808080000000000ULL, 0xf0000000000ULL},
    {0x101010101010ULL, 0xf00000000000ULL, 0x1010100000000000ULL, 0x1f0000000000ULL},
    {0x202020202020ULL, 0xe00000000000ULL, 0x2020200000000000ULL, 0x3f0000000000ULL},
    {0x404040404040ULL, 0xc00000000000ULL, 0x4040400000000000ULL, 0x7f0000000000ULL},
    {0x808080808080ULL, 0x800000000000ULL, 0x8080800000000000ULL, 0xff0000000000ULL},
    {0x1010101010101ULL, 0xff000000000000ULL, 0x101000000000000ULL, 0x1000000000000ULL},
    {0x2020202020202ULL, 0xfe000000000000ULL, 0x202000000000000ULL, 0x3000000000000ULL},
    {0x4040404040404ULL, 0xfc000000000000ULL, 0x404000000000000ULL, 0x7000000000000ULL},
    {0x8080808080808ULL, 0xf8000000000000ULL, 0x808000000000000ULL, 0xf000000000000ULL},
    {0x10101010101010ULL, 0xf0000000000000ULL, 0x1010000000000000ULL, 0x1f000000000000ULL},
    {0x20202020202020ULL, 0xe0000000000000ULL, 0x2020000000000000ULL, 0x3f000000000000ULL},
    {0x40404040404040ULL, 0xc0000000000000ULL, 0x4040000000000000ULL, 0x7f000000000000ULL},
    {0x80808080808080ULL, 0x80000000000000ULL, 0x8080000000000000ULL, 0xff000000000000ULL},
    {0x101010101010101ULL, 0xff00000000000000ULL, 0x100000000000000ULL, 0x100000000000000ULL},
    {0x202020202020202ULL, 0xfe00000000000000ULL, 0x200000000000000ULL, 0x300000000000000ULL},
    {0x404040404040404ULL, 0xfc00000000000000ULL, 0x400000000000000ULL, 0x700000000000000ULL},
    {0x808080808080808ULL, 0xf800000000000000ULL, 0x800000000000000ULL, 0xf00000000000000ULL},
    {0x1010101010101010ULL, 0xf000000000000000ULL, 0x1000000000000000ULL, 0x1f00000000000000ULL},
    {0x2020202020202020ULL, 0xe000000000000000ULL, 0x2000000000000000ULL, 0x3f00000000000000ULL},
    {0x4040404040404040ULL, 0xc000000000000000ULL, 0x4000000000000000ULL, 0x7f00000000000000ULL},
    {0x8080808080808080ULL, 0x8000000000000000ULL, 0x8000000000000000ULL, 0xff00000000000000ULL},
    {0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL}
};

#define SOUTHEAST 0
#define SOUTHWEST 1
#define NORTHWEST 2
#define NORTHEAST 3

const Bitboard bishop_moves[65][4] = { // South East, South West, North West, North East
    {0x0ULL, 0x0ULL, 0x8040201008040200ULL, 0x0ULL},
    {0x0ULL, 0x0ULL, 0x80402010080400ULL, 0x100ULL},
    {0x0ULL, 0x0ULL, 0x804020100800ULL, 0x10200ULL},
    {0x0ULL, 0x0ULL, 0x8040201000ULL, 0x1020400ULL},
    {0x0ULL, 0x0ULL, 0x80402000ULL, 0x102040800ULL},
    {0x0ULL, 0x0ULL, 0x804000ULL, 0x10204081000ULL},
    {0x0ULL, 0x0ULL, 0x8000ULL, 0x1020408102000ULL},
    {0x0ULL, 0x0ULL, 0x0ULL, 0x102040810204000ULL},
    {0x0ULL, 0x2ULL, 0x4020100804020000ULL, 0x0ULL},
    {0x1ULL, 0x4ULL, 0x8040201008040000ULL, 0x10000ULL},
    {0x2ULL, 0x8ULL, 0x80402010080000ULL, 0x1020000ULL},
    {0x4ULL, 0x10ULL, 0x804020100000ULL, 0x102040000ULL},
    {0x8ULL, 0x20ULL, 0x8040200000ULL, 0x10204080000ULL},
    {0x10ULL, 0x40ULL, 0x80400000ULL, 0x1020408100000ULL},
    {0x20ULL, 0x80ULL, 0x800000ULL, 0x102040810200000ULL},
    {0x40ULL, 0x0ULL, 0x0ULL, 0x204081020400000ULL},
    {0x0ULL, 0x204ULL, 0x2010080402000000ULL, 0x0ULL},
    {0x100ULL, 0x408ULL, 0x4020100804000000ULL, 0x1000000ULL},
    {0x201ULL, 0x810ULL, 0x8040201008000000ULL, 0x102000000ULL},
    {0x402ULL, 0x1020ULL, 0x80402010000000ULL, 0x10204000000ULL},
    {0x804ULL, 0x2040ULL, 0x804020000000ULL, 0x1020408000000ULL},
    {0x1008ULL, 0x4080ULL, 0x8040000000ULL, 0x102040810000000ULL},
    {0x2010ULL, 0x8000ULL, 0x80000000ULL, 0x204081020000000ULL},
    {0x4020ULL, 0x0ULL, 0x0ULL, 0x408102040000000ULL},
    {0x0ULL, 0x20408ULL, 0x1008040200000000ULL, 0x0ULL},
    {0x10000ULL, 0x40810ULL, 0x2010080400000000ULL, 0x100000000ULL},
    {0x20100ULL, 0x81020ULL, 0x4020100800000000ULL, 0x10200000000ULL},
    {0x40201ULL, 0x102040ULL, 0x8040201000000000ULL, 0x1020400000000ULL},
    {0x80402ULL, 0x204080ULL, 0x80402000000000ULL, 0x102040800000000ULL},
    {0x100804ULL, 0x408000ULL, 0x804000000000ULL, 0x204081000000000ULL},
    {0x201008ULL, 0x800000ULL, 0x8000000000ULL, 0x408102000000000ULL},
    {0x402010ULL, 0x0ULL, 0x0ULL, 0x810204000000000ULL},
    {0x0ULL, 0x2040810ULL, 0x804020000000000ULL, 0x0ULL},
    {0x1000000ULL, 0x4081020ULL, 0x1008040000000000ULL, 0x10000000000ULL},
    {0x2010000ULL, 0x8102040ULL, 0x2010080000000000ULL, 0x1020000000000ULL},
    {0x4020100ULL, 0x10204080ULL, 0x4020100000000000ULL, 0x102040000000000ULL},
    {0x8040201ULL, 0x20408000ULL, 0x8040200000000000ULL, 0x204080000000000ULL},
    {0x10080402ULL, 0x40800000ULL, 0x80400000000000ULL, 0x408100000000000ULL},
    {0x20100804ULL, 0x80000000ULL, 0x800000000000ULL, 0x810200000000000ULL},
    {0x40201008ULL, 0x0ULL, 0x0ULL, 0x1020400000000000ULL},
    {0x0ULL, 0x204081020ULL, 0x402000000000000ULL, 0x0ULL},
    {0x100000000ULL, 0x408102040ULL, 0x804000000000000ULL, 0x1000000000000ULL},
    {0x201000000ULL, 0x810204080ULL, 0x1008000000000000ULL, 0x102000000000000ULL},
    {0x402010000ULL, 0x1020408000ULL, 0x2010000000000000ULL, 0x204000000000000ULL},
    {0x804020100ULL, 0x2040800000ULL, 0x4020000000000000ULL, 0x408000000000000ULL},
    {0x1008040201ULL, 0x4080000000ULL, 0x8040000000000000ULL, 0x810000000000000ULL},
    {0x2010080402ULL, 0x8000000000ULL, 0x80000000000000ULL, 0x1020000000000000ULL},
    {0x4020100804ULL, 0x0ULL, 0x0ULL, 0x2040000000000000ULL},
    {0x0ULL, 0x20408102040ULL, 0x200000000000000ULL, 0x0ULL},
    {0x10000000000ULL, 0x40810204080ULL, 0x400000000000000ULL, 0x100000000000000ULL},
    {0x20100000000ULL, 0x81020408000ULL, 0x800000000000000ULL, 0x200000000000000ULL},
    {0x40201000000ULL, 0x102040800000ULL, 0x1000000000000000ULL, 0x400000000000000ULL},
    {0x80402010000ULL, 0x204080000000ULL, 0x2000000000000000ULL, 0x800000000000000ULL},
    {0x100804020100ULL, 0x408000000000ULL, 0x4000000000000000ULL, 0x1000000000000000ULL},
    {0x201008040201ULL, 0x800000000000ULL, 0x8000000000000000ULL, 0x2000000000000000ULL},
    {0x402010080402ULL, 0x0ULL, 0x0ULL, 0x4000000000000000ULL},
    {0x0ULL, 0x2040810204080ULL, 0x0ULL, 0x0ULL},
    {0x1000000000000ULL, 0x4081020408000ULL, 0x0ULL, 0x0ULL},
    {0x2010000000000ULL, 0x8102040800000ULL, 0x0ULL, 0x0ULL},
    {0x4020100000000ULL, 0x10204080000000ULL, 0x0ULL, 0x0ULL},
    {0x8040201000000ULL, 0x20408000000000ULL, 0x0ULL, 0x0ULL},
    {0x10080402010000ULL, 0x40800000000000ULL, 0x0ULL, 0x0ULL},
    {0x20100804020100ULL, 0x80000000000000ULL, 0x0ULL, 0x0ULL},
    {0x40201008040201ULL, 0x0ULL, 0x0ULL, 0x0ULL},
    {0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL}
};

// Bishop moves including the current location.
const Bitboard bishop_moves_inc[65][4] = { // South East, South West, North West, North East
    {0x1ULL, 0x1ULL, 0x8040201008040201ULL, 0x1ULL},
    {0x2ULL, 0x2ULL, 0x80402010080402ULL, 0x102ULL},
    {0x4ULL, 0x4ULL, 0x804020100804ULL, 0x10204ULL},
    {0x8ULL, 0x8ULL, 0x8040201008ULL, 0x1020408ULL},
    {0x10ULL, 0x10ULL, 0x80402010ULL, 0x102040810ULL},
    {0x20ULL, 0x20ULL, 0x804020ULL, 0x10204081020ULL},
    {0x40ULL, 0x40ULL, 0x8040ULL, 0x1020408102040ULL},
    {0x80ULL, 0x80ULL, 0x80ULL, 0x102040810204080ULL},
    {0x100ULL, 0x102ULL, 0x4020100804020100ULL, 0x100ULL},
    {0x201ULL, 0x204ULL, 0x8040201008040200ULL, 0x10200ULL},
    {0x402ULL, 0x408ULL, 0x80402010080400ULL, 0x1020400ULL},
    {0x804ULL, 0x810ULL, 0x804020100800ULL, 0x102040800ULL},
    {0x1008ULL, 0x1020ULL, 0x8040201000ULL, 0x10204081000ULL},
    {0x2010ULL, 0x2040ULL, 0x80402000ULL, 0x1020408102000ULL},
    {0x4020ULL, 0x4080ULL, 0x804000ULL, 0x102040810204000ULL},
    {0x8040ULL, 0x8000ULL, 0x8000ULL, 0x204081020408000ULL},
    {0x10000ULL, 0x10204ULL, 0x2010080402010000ULL, 0x10000ULL},
    {0x20100ULL, 0x20408ULL, 0x4020100804020000ULL, 0x1020000ULL},
    {0x40201ULL, 0x40810ULL, 0x8040201008040000ULL, 0x102040000ULL},
    {0x80402ULL, 0x81020ULL, 0x80402010080000ULL, 0x10204080000ULL},
    {0x100804ULL, 0x102040ULL, 0x804020100000ULL, 0x1020408100000ULL},
    {0x201008ULL, 0x204080ULL, 0x8040200000ULL, 0x102040810200000ULL},
    {0x402010ULL, 0x408000ULL, 0x80400000ULL, 0x204081020400000ULL},
    {0x804020ULL, 0x800000ULL, 0x800000ULL, 0x408102040800000ULL},
    {0x1000000ULL, 0x1020408ULL, 0x1008040201000000ULL, 0x1000000ULL},
    {0x2010000ULL, 0x2040810ULL, 0x2010080402000000ULL, 0x102000000ULL},
    {0x4020100ULL, 0x4081020ULL, 0x4020100804000000ULL, 0x10204000000ULL},
    {0x8040201ULL, 0x8102040ULL, 0x8040201008000000ULL, 0x1020408000000ULL},
    {0x10080402ULL, 0x10204080ULL, 0x80402010000000ULL, 0x102040810000000ULL},
    {0x20100804ULL, 0x20408000ULL, 0x804020000000ULL, 0x204081020000000ULL},
    {0x40201008ULL, 0x40800000ULL, 0x8040000000ULL, 0x408102040000000ULL},
    {0x80402010ULL, 0x80000000ULL, 0x80000000ULL, 0x810204080000000ULL},
    {0x100000000ULL, 0x102040810ULL, 0x804020100000000ULL, 0x100000000ULL},
    {0x201000000ULL, 0x204081020ULL, 0x1008040200000000ULL, 0x10200000000ULL},
    {0x402010000ULL, 0x408102040ULL, 0x2010080400000000ULL, 0x1020400000000ULL},
    {0x804020100ULL, 0x810204080ULL, 0x4020100800000000ULL, 0x102040800000000ULL},
    {0x1008040201ULL, 0x1020408000ULL, 0x8040201000000000ULL, 0x204081000000000ULL},
    {0x2010080402ULL, 0x2040800000ULL, 0x80402000000000ULL, 0x408102000000000ULL},
    {0x4020100804ULL, 0x4080000000ULL, 0x804000000000ULL, 0x810204000000000ULL},
    {0x8040201008ULL, 0x8000000000ULL, 0x8000000000ULL, 0x1020408000000000ULL},
    {0x10000000000ULL, 0x10204081020ULL, 0x402010000000000ULL, 0x10000000000ULL},
    {0x20100000000ULL, 0x20408102040ULL, 0x804020000000000ULL, 0x1020000000000ULL},
    {0x40201000000ULL, 0x40810204080ULL, 0x1008040000000000ULL, 0x102040000000000ULL},
    {0x80402010000ULL, 0x81020408000ULL, 0x2010080000000000ULL, 0x204080000000000ULL},
    {0x100804020100ULL, 0x102040800000ULL, 0x4020100000000000ULL, 0x408100000000000ULL},
    {0x201008040201ULL, 0x204080000000ULL, 0x8040200000000000ULL, 0x810200000000000ULL},
    {0x402010080402ULL, 0x408000000000ULL, 0x80400000000000ULL, 0x1020400000000000ULL},
    {0x804020100804ULL, 0x800000000000ULL, 0x800000000000ULL, 0x2040800000000000ULL},
    {0x1000000000000ULL, 0x1020408102040ULL, 0x201000000000000ULL, 0x1000000000000ULL},
    {0x2010000000000ULL, 0x2040810204080ULL, 0x402000000000000ULL, 0x102000000000000ULL},
    {0x4020100000000ULL, 0x4081020408000ULL, 0x804000000000000ULL, 0x204000000000000ULL},
    {0x8040201000000ULL, 0x8102040800000ULL, 0x1008000000000000ULL, 0x408000000000000ULL},
    {0x10080402010000ULL, 0x10204080000000ULL, 0x2010000000000000ULL, 0x810000000000000ULL},
    {0x20100804020100ULL, 0x20408000000000ULL, 0x4020000000000000ULL, 0x1020000000000000ULL},
    {0x40201008040201ULL, 0x40800000000000ULL, 0x8040000000000000ULL, 0x2040000000000000ULL},
    {0x80402010080402ULL, 0x80000000000000ULL, 0x80000000000000ULL, 0x4080000000000000ULL},
    {0x100000000000000ULL, 0x102040810204080ULL, 0x100000000000000ULL, 0x100000000000000ULL},
    {0x201000000000000ULL, 0x204081020408000ULL, 0x200000000000000ULL, 0x200000000000000ULL},
    {0x402010000000000ULL, 0x408102040800000ULL, 0x400000000000000ULL, 0x400000000000000ULL},
    {0x804020100000000ULL, 0x810204080000000ULL, 0x800000000000000ULL, 0x800000000000000ULL},
    {0x1008040201000000ULL, 0x1020408000000000ULL, 0x1000000000000000ULL, 0x1000000000000000ULL},
    {0x2010080402010000ULL, 0x2040800000000000ULL, 0x2000000000000000ULL, 0x2000000000000000ULL},
    {0x4020100804020100ULL, 0x4080000000000000ULL, 0x4000000000000000ULL, 0x4000000000000000ULL},
    {0x8040201008040201ULL, 0x8000000000000000ULL, 0x8000000000000000ULL, 0x8000000000000000ULL},
    {0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL}
};

#define KINGSIDE_PATH 0
#define QUEENSIDE_PATH 1
#define QUEENSIDE_PATH_TO_ROOK 2
#define KING_POSITION 3
#define KING_DST_KINGSIDE 4
#define KING_DST_QUEENSIDE 5

// Each 6-tuple represents:
// 1. Kingside path (White: E1-G1, Black: E8-G8)
// 2. Queenside path (White: E1-C1, Black: E8-C8)
// 3. Queenside path to rook (White: E1-B1, Black: E8-B8)
// 4. King Position (White: E1, Black: E8)
// 5. King Destination Kingside (White: G1, Black: G8)
// 6. King Destination Queenside (White: C1, Black: C8)
const Bitboard castling[2][6] = {
    {0x6ULL, 0x30ULL, 0x70ULL, E1, G1, C1}, // White
    {0x600000000000000ULL, 0x3000000000000000ULL, 0x7000000000000000ULL, E8, G8, C8} // Black
};

int extract_moves_pawns(Bitboard board, int8_t offset, Move* moves, int start, Flag flag);
int extract_moves_pawns_promotions(Bitboard board, int8_t offset, Move* moves, int start, Flag flag);
int extract_moves(Bitboard board, int8_t offset, Move* moves, int start, Flag flag);

int gen_pawn_pushes(Board* board, Move* moves, int index);
int gen_pawn_captures(Board* board, Move* moves, int index);
int gen_pawn_promotions_quiets(Board* board, Move* moves, int index);
int gen_pawn_promotions_captures(Board* board, Move* moves, int index);
int gen_pawn_en_passant(Board* board, Move* moves, int index);

int gen_knight_moves(Board* board, Move* moves, int index);
int gen_king_moves(Board* board, Move* moves, int index);
int gen_rook_moves(Board* board, Move* moves, int index);
int gen_bishop_moves(Board* board, Move* moves, int index);
int gen_queen_moves(Board* board, Move* moves, int index);

int gen_castle_moves(Board* board, Move* moves, int index);

int gen_cardinal_moves(Board* board, Move* moves, int index, Piece piece);
int gen_intercardinal_moves(Board* board, Move* moves, int index, Piece piece);

Bitboard gen_cardinal_attacks(Board* board, Piece piece);
Bitboard gen_intercardinal_attacks(Board* board, Piece piece);
Bitboard gen_attacks(Board* board);

int gen_moves(Board* board, Move* moves);

void make_move(Board* board, Move* move);
void make_move_cheap(Board* board, Move* move);

#endif